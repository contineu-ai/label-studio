"""This file and its contents are licensed under the Apache License 2.0. Please see the included NOTICE for copyright information and LICENSE for a copy of the license.
"""
import logging   # noqa: I001
from typing import Optional

from pydantic import BaseModel

# import rules

logger = logging.getLogger(__name__)


# currently setting all permission to the ones generated by django itself to remove incompatibility
class AllPermissions(BaseModel):
    '''
    Most of the permissions are created by default by django hence no need for manual creation of permission
    Exceptions to the rule will be mentioned explicitly
    '''

    projects_change_state_to_annotating: str = 'projects.change_state_to_annotating'
    projects_change_state_to_reviewing: str = 'projects.change_state_to_reviewing'
    projects_change_state_to_reviewed: str = 'projects.change_state_to_reviewed'
    projects_change_state_to_completed: str = 'projects.change_state_to_completed'
    projects_change_state_to_scraped: str = 'projects.change_state_to_scraped'

    tasks_change_state_to_pending_annotation: str = 'tasks.change_state_to_pending_annotation'
    tasks_change_state_to_pending_review: str = 'tasks.change_state_to_pending_review'
    tasks_change_state_to_approved: str = 'tasks.change_state_to_approved'
    tasks_change_state_to_rejected: str = 'tasks.change_state_to_rejected'


    # TODO:Decide whether to use these permissions to view a subset of projects or not
    # projects_view_state_to_annotating: str = 'projects.view_state_to_annotating'
    # projects_view_state_to_reviewing: str = 'projects.view_state_to_reviewing'
    # projects_view_state_to_reviewed: str = 'projects.view_state_to_reviewed'
    # projects_view_state_to_completed: str = 'projects.view_state_to_completed'
    # projects_view_state_to_scraped: str = 'projects.view_state_to_scraped'

    # updated permisisons according to the ones in the permissions database
    organizations_create: str = 'organizations.add_organization'
    organizations_view: str = 'organizations.view_organization'
    organizations_change: str = 'organizations.change_organization'
    organizations_delete: str = 'organizations.delete_organization'
    organizations_invite: str = 'organizations.invite'  # custom one

    projects_create: str = 'projects.add_project'
    projects_view: str = 'projects.view_project'
    projects_change: str = 'projects.change_project'
    projects_delete: str = 'projects.delete_project'

    tasks_create: str = 'tasks.add_task'
    tasks_view: str = 'tasks.view_task'
    tasks_change: str = 'tasks.change_task'
    tasks_delete: str = 'tasks.delete_task'

    annotations_create: str = 'annotations.add_annotation'
    annotations_view: str = 'annotations.view_annotation'
    annotations_change: str = 'annotations.change_annotation'
    annotations_delete: str = 'annotations.delete_annotation'

    data_import_create: str = 'data_import.add_fileupload'
    data_import_view: str = 'data_import.view_fileupload'
    data_import_change: str = 'data_import.change_fileupload'
    data_import_delete: str = 'data_import.delete_fileupload'

    data_export_view: str = 'data_export.view_export'
    data_export_delete: str = 'data_export.delete_export'
    data_export_create: str = 'data_export.add_export'
    data_export_change: str = 'data_export.change_export'
    # for now using data_export_* permissions for the converted format as well
    # data_export_converted_format_view: str = 'data_export.view_convertedformat'
    # data_export_converted_format_delete: str = 'data_export.delete_convertedformat'
    # data_export_converted_format_change: str = 'data_export.change_convertedformat'
    # data_export_converted_format_create: str = 'data_export.add_convertedformat'

    projects_import_create: str = 'projects.add_projectimport'
    projects_import_view: str = 'projects.view_projectimport'
    projects_import_change: str = 'projects.change_projectimport'
    projects_import_delete: str = 'projects.delete_projectimport'

    projects_reimport_create: str = 'projects.add_projectreimport'
    projects_reimport_view: str = 'projects.view_projectreimport'
    projects_reimport_change: str = 'projects.change_projectreimport'
    projects_reimport_delete: str = 'projects.delete_projectreimport'


    # these ones are to be changed, don't know how but needs to be changed
    actions_perform: str = 'actions.perform'
    predictions_any: str = 'predictions.any'
    avatar_any: str = 'avatar.any'
    labels_create: str = 'labels.create'
    labels_view: str = 'labels.view'
    labels_change: str = 'labels.change'
    labels_delete: str = 'labels.delete'
    models_create: str = 'models.create'
    models_view: str = 'models.view'
    models_change: str = 'models.change'
    models_delete: str = 'models.delete'
    model_provider_connection_create: str = 'model_provider_connection.create'
    model_provider_connection_view: str = 'model_provider_connection.view'
    model_provider_connection_change: str = 'model_provider_connection.change'
    model_provider_connection_delete: str = 'model_provider_connection.delete'


all_permissions = AllPermissions()


class ViewClassPermission(BaseModel):
    GET: Optional[str] = None
    PATCH: Optional[str] = None
    PUT: Optional[str] = None
    DELETE: Optional[str] = None
    POST: Optional[str] = None


# def make_perm(name, pred, overwrite=False):
#     if rules.perm_exists(name):
#         if overwrite:
#             rules.remove_perm(name)
#         else:
#             return
#     rules.add_perm(name, pred)
#
#
# for something, permission_name in all_permissions:
#     make_perm(permission_name, rules.is_authenticated, True)
